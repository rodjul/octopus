import boto3
import botocore
from octopus import get_creds
from octopus import my_logging
from octopus import get_file_from_s3

# ============================================================================#
#                                 CREATES IDP                                 #
# ============================================================================#
def create_idp(idp_name,saml_doc):
    # Creates IDP on account
    try:
        create = iam_client.create_saml_provider(
            SAMLMetadataDocument=str(saml_doc),
            Name=idp_name
        )
        my_logging("IDP created: {}".format(create))
        return create
    except botocore.exceptions.ClientError as e:
        my_logging("Could not create IDP: {}".format(e))
        return e

# ============================================================================#
#                                 UPDATES IDP                                 #
# ============================================================================#
def update_idp(Id,idp_name,saml_doc):
    # Sets variable with ARN for IDP
    idp_arn = "arn:aws:iam::{}:saml-provider/{}".format(
        Id,
        idp_name
    )

    try:
        # Updates Saml Document
        update = iam_client.update_saml_provider(
            SAMLMetadataDocument=str(saml_doc),
            SAMLProviderArn=idp_arn
        )
        my_logging("IDP updated: {}".format(update))
        return update
    except botocore.exceptions.ClientError as e:
        my_logging("Could not update IDP: {}".format(e))
        return e

# ============================================================================#
#                               MAIN FUNCTION                                 #
# ============================================================================#
def lambda_handler(event,context):
    # Event Sample
    # {"saml_xml":"", "bucket_name":"", "Id":"", "idp_name":""}

    # Gets credentials for IAM Client
    global iam_client
    iam_client = get_creds("iam",Id=event["Id"])

    # Name of SAML file generated by ADFS
    saml_xml = event["saml_xml"]

    # Gets SAML xml Document from S3
    saml_doc = get_file_from_s3(
        event["bucket_name"],
        "files/{}".format(saml_xml)
    )

    # Tryes to create idp on account
    idp = create_idp(event["idp_name"],saml_doc)
    # If IDP already exists, updates it
    if isinstance(idp,botocore.exceptions.ClientError) and \
    idp.response["Error"]["Code"] == "EntityAlreadyExists":
        update_idp(event["Id"],event["idp_name"],saml_doc)