service: octopus

package:
  individually: true
  excludeDevDependencies: false
  exclude:
    - "**/**"
  #include:
  #  - "src/model/*.py"
  

provider:
  name: aws
  runtime: python3.6
  region: ${opt:region, 'us-east-2'}
  profile: ${opt:profile, 'rodjul_d00009'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "sqs:*"
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - "logs:*"
      Resource: 
        Fn::GetAtt: [ SQSCreateAccount, Arn ] 

plugins:
  - serverless-plugin-log-retention
  - serverless-s3-sync
  # - serverless-plugin-split-stacks

custom:
  awsconfig: ${file(awsconfig.yml):${self:provider.stage}}
  # splitStacks:
  #   perFunction: true
  #   perType: false
  #   perGroupFunction: false
  sqs_name: "CreateAccount"
  sqs_compliance_new_check: "ComplianceNewCheck"
  sqs_compliance_cis_new_check: "ComplianceCISNewCheck"
  s3Sync:
    - bucketName: "octopus-site"
      localDir: public/build/


functions:
  create_account:
    handler: src/lambda_create_account.lambda_handler
    environment:
      URL_SQS: "https://sqs.${self:provider.region}.amazonaws.com/${self:custom.awsconfig.aws_account_id}/${self:custom.sqs_name}"
      PAYER_ID: ${self:custom.awsconfig.aws_account_payer_id}
      octopus_resource: "totvs-cloudformation-templates"
    runtime: python3.6
    memorySize: 256
    timeout: 300 # 300 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-create_account-${self:provider.stage}
    package:
      include:
        - src/lambda_create_account.py
        - src/model/*.py
    layers:
      - "arn:aws:lambda:us-east-2:826839167791:layer:model_octopus:13"
    events:
      - sqs:
         arn: 
          "arn:aws:sqs:${self:provider.region}:${self:custom.awsconfig.aws_account_id}:CreateAccount"
          #Fn::GetAtt: [ SQSCreateAccount , Arn ]
          
  request_creation_account:
    handler: src/lambda_controller_creation_account.lambda_handler
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-controller_creation_account-${self:provider.stage}
    package:
      include:
        - src/lambda_controller_creation_account.py
    events:
      - http:
          path: /account/create
          method: post
          cors: true
  
  request_account_id_created:
    handler: src/lambda_get_account_id_created.lambda_handler
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-get_account_id_created-${self:provider.stage}
    package:
      include:
        - src/lambda_get_account_id_created.py
    events:
      - http:
          path: /account/id/{name_account}
          method: get
          cors: true

  request_login_checktoken:
    handler: src/lambda_login_check_token.lambda_handler
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-login_check_token-${self:provider.stage}
    package:
      include:
        - src/lambda_login_check_token.py
    events:
      - http:
          path: /account/checkToken
          method: post
          cors: true

  request_get_account_organizations:
    handler: src/lambda_get_accounts_organizations.lambda_handler
    environment:
      PAYER_ID: ${self:custom.awsconfig.aws_account_payer_id}
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-get_accounts_organizations-${self:provider.stage}
    package:
      include:
        - src/model/*.py
        - src/lambda_get_accounts_organizations.py
    layers:
      - "arn:aws:lambda:us-east-2:826839167791:layer:model_octopus:13"        
    events:
      - http:
          path: /account/organizations
          method: get
          cors: true

  # send the data to sqs
  controller_compliance_new_check: 
    handler: src/lambda_controller_compliances.lambda_handler
    environment:
      URL_SQS_IAM: "https://sqs.${self:provider.region}.amazonaws.com/${self:custom.awsconfig.aws_account_id}/${self:custom.sqs_compliance_new_check}"
      URL_SQS_CIS: "https://sqs.${self:provider.region}.amazonaws.com/${self:custom.awsconfig.aws_account_id}/${self:custom.sqs_compliance_cis_new_check}"
      PAYER_ID: ${self:custom.awsconfig.aws_account_payer_id}
      LAMBDA_ORGANIZATION: ${self:service}-get_accounts_organizations-${self:provider.stage}
      # octopus_resource: "totvs-cloudformation-templates"
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-controller_compliances-${self:provider.stage}
    package:
      include:
        - src/lambda_controller_compliances.py
        - src/model/*.py
    layers:
      - "arn:aws:lambda:us-east-2:826839167791:layer:model_octopus:13"
      - "arn:aws:lambda:us-east-2:826839167791:layer:requests:1"
    events:
      - http:
          path: /policy/compliance/iam/new
          method: post
          cors: true
      - http:
          path: /policy/compliance/cis/new
          method: post
          cors: true
  
  # receive the sqs data and also the requests from api gateway
  compliance_iam_account:
    handler: src/lambda_compliance_iam.lambda_handler
    environment:
      octopus_resource: totvs-cloudformation-templates 
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-compliance_iam-${self:provider.stage}
    package:
      include:
        - src/model/*.py
        - src/lambda_compliance_iam.py
    layers:
      - "arn:aws:lambda:us-east-2:826839167791:layer:model_octopus:13"        
    events:
      - http:
          path: /policy/compliance/iam/check
          method: get
          cors: true
      - http:
          path: /policy/compliance/iam/dates-available
          method: get
          cors: true          
      - sqs:
         arn: 
          "arn:aws:sqs:${self:provider.region}:${self:custom.awsconfig.aws_account_id}:${self:custom.sqs_compliance_new_check}"

  # receive the requests from api gateway
  request_cis_compliance:
    handler: src/lambda_cis_compliance.lambda_handler
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-lambda_cis_compliance-${self:provider.stage}
    package:
      include:
        - src/model/*.py
        - src/lambda_cis_compliance.py
    layers:
      - "arn:aws:lambda:us-east-2:826839167791:layer:model_octopus:13"        
    events:
      - http:
          path: /policy/compliance/cis/check
          method: get
          cors: true
      - http:
          path: /policy/compliance/cis/dates-available
          method: get
          cors: true
  
  # receive the sqs data
  proccess_data_cis_compliance:
    handler: src/lambda_aws_cis_foundation_benchmark_checklist.lambda_handler
    runtime: python3.6
    memorySize: 256
    timeout: 600 # 10 minutes
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-aws_cis_foundation_benchmark_checklist-${self:provider.stage}
    package:
      include:
        - src/model/*.py
        - src/lambda_aws_cis_foundation_benchmark_checklist.py
    layers:
      - "arn:aws:lambda:us-east-2:826839167791:layer:model_octopus:13"        
    events:      
      - sqs:
         arn: 
          "arn:aws:sqs:${self:provider.region}:${self:custom.awsconfig.aws_account_id}:${self:custom.sqs_compliance_cis_new_check}"
        batchSize: 2


  requests_manage_policy: 
    handler: src/lambda_manage_policy.lambda_handler
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-manage_policy-${self:provider.stage}
    package:
      include:
        - src/lambda_manage_policy.py
        - src/model/*.py
    layers:
      - "arn:aws:lambda:us-east-2:826839167791:layer:model_octopus:13"
      #- "arn:aws:lambda:us-east-2:826839167791:layer:requests:1"
    events:
      - http:
          path: /policy/content
          method: get
          cors: true
      - http:
          path: /policy/available/trust
          method: get
          cors: true
      - http:
          path: /policy/available/iam
          method: get
          cors: true
      - http:
          path: /policy/available/role
          method: get
          cors: true
      - http:
          path: /policy/update
          method: post
          cors: true
      # - http:
      #     path: /policy/{policy_name}
      #     method: get
      #     cors: true
      # - http:
      #     path: /policy/update
      #     method: put
      #     cors: true
      # - http:
      #     path: /policy/delete
      #     method: delete
      #     cors: true

  # request_get_default_role_policy:
  #   handler: src/lambda_get_default_role_policy.lambda_handler
  #   environment:
  #     octopus_resource: "totvs-cloudformation-templates"
  #   runtime: python3.6
  #   memorySize: 256
  #   timeout: 30 # 30 seconds
  #   role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
  #   name: ${self:service}-get_default_role_policy-${self:provider.stage}
  #   package:
  #     include:
  #       - src/lambda_get_default_role_policy.py
  #   events:
  #     - http:
  #         path: /policy/default
  #         method: get
  #         cors: true

  request_manage_roles:
    handler: src/lambda_manage_role.lambda_handler
    environment:
      octopus_resource: "totvs-cloudformation-templates"
    runtime: python3.6
    memorySize: 256
    timeout: 30 # 30 seconds
    role: arn:aws:iam::${self:custom.awsconfig.aws_account_id}:role/${self:custom.awsconfig.aws_role_lambda}
    name: ${self:service}-manage_role-${self:provider.stage}
    package:
      include:
        - src/lambda_manage_role.py
    events:
      - http:
          path: /role/available
          method: get
          cors: true
      - http:
          path: /role/{role_type}
          method: get
          cors: true
      - http:
          path: /role/new
          method: post
          cors: true          
      - http:
          path: /role/update
          method: put
          cors: true
      - http:
          path: /role/delete
          method: delete
          cors: true


resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
         
    DynamoDbOctopusAccount:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: NameAccount
            AttributeType: S
        KeySchema:
          - AttributeName: NameAccount
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_account

    DynamoDbAccountCompliance:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: DateAction
            AttributeType: S
          - AttributeName: Account
            AttributeType: S
          - AttributeName: TypeCompliance
            AttributeType: S
        KeySchema:
          - AttributeName: DateAction
            KeyType: HASH
          - AttributeName: Account
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: "2"
          WriteCapacityUnits: "2"
        GlobalSecondaryIndexes:
          - IndexName: DateAction-index
            KeySchema:
            - AttributeName: DateAction
              KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY          
            ProvisionedThroughput:
              ReadCapacityUnits: "2"
              WriteCapacityUnits: "2"
          - IndexName: DateAction-TypeRole-index
            KeySchema:
            - AttributeName: DateAction
              KeyType: HASH
            - AttributeName: TypeRole
              KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY          
            ProvisionedThroughput:
              ReadCapacityUnits: "2"
              WriteCapacityUnits: "2"
        TableName: octopus_account_compliance

    DynamoDbAccountComplianceDates:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: DateAction
            AttributeType: S
        KeySchema:
          - AttributeName: DateAction
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_account_compliance_dates

    DynamoDbAPolicies:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: PolicyName
            AttributeType: S
          - AttributeName: Type
            AttributeType: S
        KeySchema:
          - AttributeName: PolicyName
            KeyType: HASH
          - AttributeName: Type
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_policy

    DynamoDbRoleType:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: RoleType
            AttributeType: S
        KeySchema:
          - AttributeName: RoleType
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_role_type


    SQSCreateAccount:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.sqs_name}
        VisibilityTimeout: 500 
    
    SQSComplianceNewCheck:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.sqs_compliance_new_check}
        VisibilityTimeout: 500 
    
    SQSComplianceCISNewCheck:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.sqs_compliance_cis_new_check}
        VisibilityTimeout: 600 
    
    # Specifying the S3 Bucket
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: "octopus-site"
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::",{"Ref": "StaticSite"},"/*"]]
              Condition:
                IpAddress: 
                  aws:SourceIp: 
                    - "187.94.52.20/32"
                    # - "187.94.48.0/20"
                    # - "138.219.88.0/22"
                    # - "189.89.32.0/20"
                    # - "181.41.160.0/19"