service: octopus-resources

package:
  individually: true
  excludeDevDependencies: false
  exclude:
    - "**/**"
  #include:
  #  - "src/model/*.py"
  

provider:
  name: aws
  runtime: python3.6
  region: ${opt:region, 'us-east-2'}
  profile: ${opt:profile, 'rodjul_d00009'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "sqs:*"
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - "logs:*"
      Resource: 
        Fn::GetAtt: [ SQSCreateAccount, Arn ] 
  apiKeys:
    - security_dev #https://lorenstewart.me/2017/10/24/serverless-framework-securing-aws-lambda-endpoints/

plugins:
  - serverless-plugin-log-retention
  - serverless-s3-sync
  # - serverless-plugin-split-stacks

custom:
  awsconfig: ${file(awsconfig.yml):${self:provider.stage}}
  # splitStacks:
  #   perFunction: true
  #   perType: false
  #   perGroupFunction: false
  sqs_name: "CreateAccount"
  sqs_compliance_new_check: "ComplianceNewCheck"
  sqs_compliance_cis_new_check: "ComplianceCISNewCheck"
  bucket_name:
    dev: "octopus-site"
    prod: "octopus-site-prod"
  s3Sync:
    - bucketName: ${self:custom.bucket_name.${opt:stage}, self:custom.bucket_name.dev}
      localDir: public/build/



resources:
  Resources:

    #https://www.serverless.com/framework/docs/providers/aws/guide/iam/
    RoleOctopusLambda:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: octopus_lambda # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess
          - arn:aws:iam::aws:policy/AWSLambdaFullAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
          - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        Policies:
          - PolicyName: policy-octopus_assumerole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sts:AssumeRole
                  Resource:
                    - 'arn:aws:iam::*:role/octopusmngt'
        
    DynamoDbOctopusAccount:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: NameAccount
            AttributeType: S
        KeySchema:
          - AttributeName: NameAccount
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_account

    DynamoDbAccountCompliance:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: DateAction
            AttributeType: S
          - AttributeName: Account
            AttributeType: S
          - AttributeName: TypeRole
            AttributeType: S
        KeySchema:
          - AttributeName: DateAction
            KeyType: HASH
          - AttributeName: Account
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: "2"
          WriteCapacityUnits: "2"
        GlobalSecondaryIndexes:
          - IndexName: DateAction-index
            KeySchema:
            - AttributeName: DateAction
              KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY          
            ProvisionedThroughput:
              ReadCapacityUnits: "2"
              WriteCapacityUnits: "2"
          - IndexName: DateAction-TypeRole-index
            KeySchema:
            - AttributeName: DateAction
              KeyType: HASH
            - AttributeName: TypeRole
              KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY          
            ProvisionedThroughput:
              ReadCapacityUnits: "2"
              WriteCapacityUnits: "2"
        TableName: octopus_account_compliance

    DynamoDbAccountComplianceDates:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: DateAction
            AttributeType: S
        KeySchema:
          - AttributeName: DateAction
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_account_compliance_dates

    DynamoDbAPolicies:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: PolicyName
            AttributeType: S
          - AttributeName: Type
            AttributeType: S
        KeySchema:
          - AttributeName: PolicyName
            KeyType: HASH
          - AttributeName: Type
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_policy

    DynamoDbRoleType:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: RoleType
            AttributeType: S
        KeySchema:
          - AttributeName: RoleType
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: octopus_role_type


    SQSCreateAccount:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.sqs_name}
        VisibilityTimeout: 500 
    
    SQSComplianceNewCheck:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.sqs_compliance_new_check}
        VisibilityTimeout: 500 
    
    SQSComplianceCISNewCheck:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.sqs_compliance_cis_new_check}
        VisibilityTimeout: 600 
    
    # Specifying the S3 Bucket
    # StaticSite:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     AccessControl: PublicRead
    #     BucketName: "octopus-site"
    #     WebsiteConfiguration:
    #       IndexDocument: index.html
    #       ErrorDocument: index.html

    # StaticSiteS3BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket:
    #       Ref: StaticSite
    #     PolicyDocument:
    #       Statement:
    #         - Sid: PublicReadGetObject
    #           Effect: Allow
    #           Principal: "*"
    #           Action:
    #           - s3:GetObject
    #           Resource:
    #             Fn::Join: ["", ["arn:aws:s3:::",{"Ref": "StaticSite"},"/*"]]
    #           Condition:
    #             IpAddress: 
    #               aws:SourceIp: 
    #                 - "187.94.52.20/32"
    #                 # - "187.94.48.0/20"
    #                 # - "138.219.88.0/22"
    #                 # - "189.89.32.0/20"
    #                 # - "181.41.160.0/19"